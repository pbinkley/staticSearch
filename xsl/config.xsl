<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns="http://www.w3.org/1999/xhtml"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                exclude-result-prefixes="#all"
                xpath-default-namespace="http://www.w3.org/1999/xhtml"
                version="3.0">
   <xd:doc xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl" scope="stylesheet">
      <xd:desc>
         <xd:p>Created on 2020-11-07 by an automated process.</xd:p>
         <xd:p>
            <xd:b>Authors:</xd:b> Joey Takeda and Martin Holmes</xd:p>
         <xd:p>This is the temporary stylesheet derived from file:/Users/takeda/projects/staticSearch/configTest.xml and generated by file:/Users/takeda/projects/staticSearch/xsl/create_config_xsl.xsl.
                            See <xd:a href="create_config_xsl.xsl">create_config_xsl.xsl</xd:a> (or https://github.com/projectEndings/staticSearch/blob/master/xsl/create_config_xsl.xsl)
                            for further information on how this document is created and the purpose it serves for the static search codebase.
                        </xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:include href="file:/Users/takeda/projects/staticSearch/stemmers/en/ssStemmer.xsl"/>
   <xsl:param name="configFile">file:/Users/takeda/projects/staticSearch/configTest.xml</xsl:param>
   <xsl:param name="buildReportFilename" select="'staticSearch_report.html'"/>
   <xsl:param name="searchFile">file:/Users/takeda/projects/staticSearch/test/search.html</xsl:param>
   <xsl:param name="versionFile">file:/Users/takeda/projects/staticSearch/test/VERSION</xsl:param>
   <xsl:param name="recurse" select="true()"/>
   <xsl:param name="phrasalSearch" select="true()"/>
   <xsl:param name="wildcardSearch" select="true()"/>
   <xsl:param name="createContexts" select="true()"/>
   <xsl:param name="maxKwicsToHarvest">3</xsl:param>
   <xsl:param name="maxKwicsToShow">3</xsl:param>
   <xsl:param name="totalKwicLength">15</xsl:param>
   <xsl:param name="kwicTruncateString">...</xsl:param>
   <xsl:param name="verbose" select="false()"/>
   <xsl:param name="stopwordsFile">file:/Users/takeda/projects/staticSearch/test/test_stopwords.txt</xsl:param>
   <xsl:param name="dictionaryFile">file:/Users/takeda/projects/staticSearch/xsl/english_words.txt</xsl:param>
   <xsl:param name="indentJSON" select="true()"/>
   <xsl:param name="outputFolder">ssTest</xsl:param>
   <xsl:param name="defaultStemmerFolder">en</xsl:param>
   <xsl:param name="scoringAlgorithm" select="'raw'"/>
   <xsl:param name="versionString">_2ff3524</xsl:param>
   <xsl:variable name="collectionDir">file:/Users/takeda/projects/staticSearch/test</xsl:variable>
   <xsl:variable name="outDir">file:/Users/takeda/projects/staticSearch/test/ssTest</xsl:variable>
   <xsl:variable name="tempDir">file:/Users/takeda/projects/staticSearch/test/ssTest/temp</xsl:variable>
   <xsl:variable name="ssBaseDir">file:/Users/takeda/projects/staticSearch</xsl:variable>
   <xsl:variable name="kwicLengthHalf" select="8"/>
   <xsl:variable name="docs"
                 select="collection(concat($collectionDir, '?select=*.*htm*;recurse=yes'))[not(starts-with(document-uri(.),$tempDir))][not(ends-with(document-uri(.), $buildReportFilename))]"/>
   <xsl:variable name="docUris"
                 select="uri-collection(concat($collectionDir, '?select=*.*htm*;recurse=yes'))[not(starts-with(.,$tempDir))][not(ends-with(., $buildReportFilename))]"/>
   <xsl:variable name="tokenizedDocs"
                 select="collection(concat($tempDir, '?select=*_tokenized.*htm*;recurse=yes'))"/>
   <xsl:variable name="tokenizedUris"
                 select="uri-collection(concat($tempDir, '?select=*_tokenized.*htm*;recurse=yes'))"/>
   <xsl:variable name="hasExclusions" select="false()"/>
   <xsl:template name="echoParams">
      <xsl:if test="$verbose">
         <xsl:message>$configFile: <xsl:value-of select="$configFile"/>
         </xsl:message>
         <xsl:message>$buildReportFilename: <xsl:value-of select="$buildReportFilename"/>
         </xsl:message>
         <xsl:message>$searchFile: <xsl:value-of select="$searchFile"/>
         </xsl:message>
         <xsl:message>$versionFile: <xsl:value-of select="$versionFile"/>
         </xsl:message>
         <xsl:message>$recurse: <xsl:value-of select="$recurse"/>
         </xsl:message>
         <xsl:message>$phrasalSearch: <xsl:value-of select="$phrasalSearch"/>
         </xsl:message>
         <xsl:message>$wildcardSearch: <xsl:value-of select="$wildcardSearch"/>
         </xsl:message>
         <xsl:message>$createContexts: <xsl:value-of select="$createContexts"/>
         </xsl:message>
         <xsl:message>$maxKwicsToHarvest: <xsl:value-of select="$maxKwicsToHarvest"/>
         </xsl:message>
         <xsl:message>$maxKwicsToShow: <xsl:value-of select="$maxKwicsToShow"/>
         </xsl:message>
         <xsl:message>$totalKwicLength: <xsl:value-of select="$totalKwicLength"/>
         </xsl:message>
         <xsl:message>$kwicTruncateString: <xsl:value-of select="$kwicTruncateString"/>
         </xsl:message>
         <xsl:message>$verbose: <xsl:value-of select="$verbose"/>
         </xsl:message>
         <xsl:message>$stopwordsFile: <xsl:value-of select="$stopwordsFile"/>
         </xsl:message>
         <xsl:message>$dictionaryFile: <xsl:value-of select="$dictionaryFile"/>
         </xsl:message>
         <xsl:message>$indentJSON: <xsl:value-of select="$indentJSON"/>
         </xsl:message>
         <xsl:message>$outputFolder: <xsl:value-of select="$outputFolder"/>
         </xsl:message>
         <xsl:message>$defaultStemmerFolder: <xsl:value-of select="$defaultStemmerFolder"/>
         </xsl:message>
         <xsl:message>$scoringAlgorithm: <xsl:value-of select="$scoringAlgorithm"/>
         </xsl:message>
         <xsl:message>$versionString: <xsl:value-of select="$versionString"/>
         </xsl:message>
         <xsl:message>$collectionDir: <xsl:value-of select="$collectionDir"/>
         </xsl:message>
         <xsl:message>$outDir: <xsl:value-of select="$outDir"/>
         </xsl:message>
         <xsl:message>$tempDir: <xsl:value-of select="$tempDir"/>
         </xsl:message>
      </xsl:if>
   </xsl:template>
   <xsl:variable xmlns:hcmc="http://hcmc.uvic.ca/ns/staticSearch"
                 name="stopwordsFileXml"
                 select="doc('file:/Users/takeda/projects/staticSearch/test/ssTest/dicts/test_stopwords.xml')"/>
   <xsl:variable xmlns:hcmc="http://hcmc.uvic.ca/ns/staticSearch"
                 name="dictionaryFileXml"
                 select="doc('file:/Users/takeda/projects/staticSearch/test/ssTest/dicts/english_words.xml')"/>
   <xsl:key xmlns:hcmc="http://hcmc.uvic.ca/ns/staticSearch"
            name="w"
            match="hcmc:word"
            use="."/>
   <xsl:template match="h1 | h2" priority="1" mode="clean">
      <xsl:if test="$verbose">
         <xsl:message>Template #clean: retaining <xsl:value-of select="local-name(.)"/>
         </xsl:message>
      </xsl:if>
      <xsl:copy>
         <xsl:apply-templates select="@*|node()" mode="#current"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template match="span[@class='lineNum'] | script | style"
                 priority="1"
                 mode="clean">
      <xsl:if test="$verbose">
         <xsl:message>Template #clean: Deleting <xsl:value-of select="local-name(.)"/>
         </xsl:message>
      </xsl:if>
   </xsl:template>
   <xsl:template match="div[@class='l'] | span[@class='note']"
                 priority="1"
                 mode="contextualize">
      <xsl:if test="$verbose">
         <xsl:message>Template #contextualize: Adding @data-staticSearch-context flag to <xsl:value-of select="local-name(.)"/>
         </xsl:message>
      </xsl:if>
      <xsl:copy>
         <xsl:apply-templates select="@*" mode="#current"/>
         <xsl:if test="self::div[@class='l']">
            <xsl:attribute name="data-staticSearch-context" select="'true'"/>
         </xsl:if>
         <xsl:if test="self::span[@class='note']">
            <xsl:attribute name="data-staticSearch-context" select="'true'"/>
         </xsl:if>
         <xsl:apply-templates select="node()" mode="#current"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template match="h1 | h2" priority="1" mode="weigh">
      <xsl:if test="$verbose">
         <xsl:message>Template #weigh: Adding @data-weight to <xsl:value-of select="local-name(.)"/>
         </xsl:message>
      </xsl:if>
      <xsl:copy>
         <xsl:apply-templates select="@*" mode="#current"/>
         <xsl:if test="self::h1 | h2">
            <xsl:attribute name="data-staticSearch-weight" select="2"/>
         </xsl:if>
         <xsl:apply-templates select="node()" mode="#current"/>
      </xsl:copy>
   </xsl:template>
</xsl:stylesheet>
